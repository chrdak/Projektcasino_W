
/*         DEMON        */
/*
static void daemonize(void){
    pid_t pid, sid;
    //already a daemon /
    if ( getppid() == 1 ) return;
    //Fork off the parent process /
    pid = fork();
    if (pid < 0) {
        exit(EXIT_FAILURE);
    }
    // If we got a good PID, then we can exit the parent process. /
    if (pid > 0) {
        exit(EXIT_SUCCESS);
    }
    // At this point we are executing as the child process /
    // Change the file mode mask /
    umask(0);
    // Create a new SID for the child process /

    sid = setsid();
    if (sid < 0) {
        exit(EXIT_FAILURE);
    }
    // Change the current working directory.  This prevents the current
      // directory from being locked; hence not being able to remove it.

    pid = fork();
    if(pid>0){
        if ((chdir("/")) < 0) {
            exit(EXIT_FAILURE);
        }
        // Redirect standard files to /dev/null
        freopen( "/dev/null", "r", stdin);
        freopen( "/dev/null", "w", stdout);
        freopen( "/dev/null", "w", stderr);
    }
}
*/

/*      SERVERKOD
int server(){
    int server_socket, client_socket,consocket=0;
    struct sockaddr_in serv, dest;
    char msg[] = "Connected with server.\n";

    //daemonize();

    pid=getpid();
    int listen_socket; // socket used to listen for incoming connections
    socklen_t socksize = sizeof(struct sockaddr_in);
    memset(&serv, 0, sizeof(serv));           // zero the struct before filling the fields
    serv.sin_family = AF_INET;                // set the type of connection to TCP/IP
    serv.sin_addr.s_addr = htonl(INADDR_ANY); // set our address to any interface
    serv.sin_port = htons(PORTNUM);
    listen_socket = socket(AF_INET, SOCK_STREAM, 0);
    bind(listen_socket, (struct sockaddr *)&serv, sizeof(struct sockaddr));
    listen(listen_socket, 5);


    printf("Incoming connection from %s - sending welcome\n", inet_ntoa(dest.sin_addr));

    send(consocket, msg, strlen(msg), 0);
    consocket = accept(listen_socket, (struct sockaddr *)&dest, &socksize);


    // Nu finns de en anslutning, och nedan kan kod för kommunikationen över socketen finnas.
}
    */
